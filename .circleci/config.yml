version: 2.1

orbs:
  codecov: codecov/codecov@3.2.4

jobs:
  build:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout

      - restore_cache:
          key: tsinfer-{{ .Branch }}-v3

      - run:
          name: Install dependencies and set PATH
          command: |
              sudo apt-get update
              sudo apt-get install libcap-dev libnuma-dev libcunit1-dev \
                  libconfig-dev ninja-build valgrind clang 
              # set path persistently https://circleci.com/docs/2.0/env-vars/#setting-path
              echo 'export PATH=/home/circleci/.local/bin:$PATH' >> $BASH_ENV

      - run:
          name: Install test dependencies
          command: |
              pyenv global 3.10
              pip install uv
              uv pip install --system -r pyproject.toml --extra test
              pyenv rehash

      - save_cache:
          key: tsinfer-{{ .Branch }}-v1
          paths:
            - "/home/circleci/.local"

      - run:
          name: Checkout submodules
          command: |
            git submodule update --init --recursive
            # Write out the status for debugging purposes. Are we checked out at tags?
            git submodule status --recursive

      - run:
          name: Build the distribution tarball.
          command: |
            python -m build --sdist
            python setup.py check
            python -m twine check dist/*.tar.gz --strict
            rm dist/*
            python -m build

      - run:
          name: Install from the distribution tarball
          command: |
            python -m venv venv
            source venv/bin/activate
            pip install dist/*.tar.gz
            python -c 'import tsinfer; print(tsinfer.__version__)'

            #Also check the wheel
            pip uninstall --yes tsinfer
            pip install dist/*.whl
            python -c 'import tsinfer; print(tsinfer.__version__)'
            deactivate
            rm -rf venv

      - run:
          name: Compile Python
          command: |
              python setup.py build_ext --inplace

      - run:
          name: Run Python tests and upload coverage
          command: |
              python3 -m pytest --cov=tsinfer  --cov-report=xml --cov-branch -xvs tests
              rm .coverage

      - codecov/upload:
          flags: python
          token: CODECOV_TOKEN

      - run:
          name: Compile C with gcc
          command: |
            CFLAGS=--coverage meson lib/ build-gcc
            ninja -C build-gcc

      - run:
          name: Compile C with clang
          command: |
            CC=clang CXX=clang++ meson lib/ build-clang
            ninja -C build-clang

      - run:
          name: Run the low-level tests.
          command: |
            cd build-gcc
            ./tests

      - run:
          name: Run gcov manually, as the one used in codecov doesn't work here.
          command: |
            gcov -pb -o ./build/temp.linux*/ _tsinfermodule.c
            cd build-gcc
            # TODO should be able to do this with 'find', but it's tricky and opaque.
            gcov -pb ./libtsinfer.a.p/ancestor_builder.c.gcno ../lib/ancestor_builder.c
            gcov -pb ./libtsinfer.a.p/ancestor_matcher.c.gcno ../lib/ancestor_matcher.c
            gcov -pb ./libtsinfer.a.p/tree_sequence_builder.c.gcno ../lib/tree_sequence_builder.c
            gcov -pb ./libtsinfer.a.p/object_heap.c.gcno ../lib/object_heap.c
            gcov -pb ./libtsinfer.a.p/err.c.gcno ../lib/err.c
            cd ..

      - codecov/upload:
          flags: C
          token: CODECOV_TOKEN

      - run:
          name: Valgrind for C tests.
          command: |
            valgrind --leak-check=full --error-exitcode=1 ./build-gcc/tests

      - run:
          name: Run clang-compiled C tests
          command: |
            ninja -C build-clang test


